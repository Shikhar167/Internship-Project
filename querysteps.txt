QUERIES STEP BY STEP:

load csv with headers from "https://raw.githubusercontent.com/Shikhar167/datsets/master/testcases.csv" as line
create(c:cases{name : line.case_name,caseid : line.case_id})

load csv with headers from "https://raw.githubusercontent.com/Shikhar167/datsets/master/testactivities.csv" as line
create(a:activities{name : line.activitity_name,caseid : line.case_no,event:line.event_id,resource:line.resource_id,activityid:line.activity_id,start:line.start_time,complete:line.complete_time,next:line.next_activ_id})

match(c:cases),(a:activities) where c.caseid=a.caseid
create(c)-[:CONTAINS]->(a)

match(a:activities),(c:cases)
return a,c

match(current:activities),(nextup:activities) where current.next = nextup.activityid
create(current) -[:NEXT]->(nextup)


MATCH (start:activities), (end:activities),
path = (start)-[:NEXT*..8]->(end)
WHERE
  NOT (:activities)-[:NEXT]->(start) AND
  NOT (end)-[:NEXT]->(:activities) AND
  NONE(a IN NODES(path)[1..LENGTH(path)+1] WHERE a.name = start.name) AND
  NONE(a IN NODES(path)[0..LENGTH(path)] WHERE a.name = end.name)
RETURN EXTRACT(a IN NODES(path)[0..LENGTH(path)+1] | a.name) AS path, COUNT(path) AS frequency
ORDER BY COUNT(path) DESC
LIMIT 10;

call apoc.nodes.group(['activities'],['name'])
YIELD nodes,relationship RETURN *;